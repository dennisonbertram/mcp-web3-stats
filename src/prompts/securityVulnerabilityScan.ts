import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";

export function registerSecurityVulnerabilityScanPrompt(server: McpServer) {
  server.prompt(
  "security_vulnerability_scan",
  "Scan smart contracts for common vulnerabilities and security best practices.",
  {
    contractAddress: z.string().describe("The contract address to scan"),
    chainId: z.string().describe("The chain ID"),
    checkUpgradeable: z.string().optional().describe("Optional: Check for upgradeable proxy patterns - 'true' or 'false'")
  },
  ({ contractAddress, chainId, checkUpgradeable }) => {
    return {
      messages: [
        {
          role: "user",
          content: {
            type: "text",
            text: `Perform security scan on contract ${contractAddress} on chain ${chainId}. Check for:
1. Contract verification status and source code
2. Common vulnerabilities (reentrancy, overflow, access control)
3. Centralization risks (owner privileges, pause functions)
4. External dependencies and composability risks
${checkUpgradeable === 'true' ? '5. Upgradeable proxy implementation security' : '5. Immutability verification'}
6. Historical security incidents`
          }
        },
        {
          role: "assistant",
          content: {
            type: "text",
            text: `I'll scan the contract for security vulnerabilities and analyze potential risks in the implementation.`
          }
        }
      ]
    };
  }
);
}